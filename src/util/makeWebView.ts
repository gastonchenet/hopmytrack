import { parse } from "node-html-parser";
import type Result from "../structures/Result";
import { compileString } from "sass";
import { parseLocation } from "./findLocation";
import capitalize from "./capitalize";
import roundDecimal from "./roundDecimal";
import open from "open";

const HTML = /* HTML */ `
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8" />
			<meta name="viewport" content="width=device-width, initial-scale=1.0" />
			<link rel="favicon" href="https://hopmytrack.vercel.app/favicon.ico" />
			<link
				rel="stylesheet"
				href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&icon_names=done_all"
			/>
		</head>
		<body>
			<div class="found-data"></div>
			<div class="tree">
				<div class="main-data">
					<h2>Likely data</h2>
					<p>The following data is likely to be associated with the target.</p>
					<div class="found-likely-data"></div>
				</div>
				<div class="column c1"></div>
				<div class="column c2"></div>
			</div>
			<footer>
				<p>
					Generated by
					<a href="https://hopmytrack.vercel.app" target="_blank">HopMyTrack</a>
				</p>
				<p>
					Made with ❤️ by
					<a href="https://github.com/gastonchenet" target="_blank"
						>Gaston Chenet</a
					>
				</p>
			</footer>
		</body>
	</html>
`;

const SCSS = /* CSS */ `
@import url('https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&display=swap');

.material-symbols-outlined {
  font-variation-settings:
  'FILL' 0,
  'wght' 400,
  'GRAD' 0,
  'opsz' 24
}

* {
	padding: 0;
	margin: 0;
	box-sizing: border-box;
	font-family: 'Lato', sans-serif;
}

a {
	color: #4553ec;
	text-decoration: none;
	width: fit-content;

	&:hover {
		text-decoration: underline;
	}
}

body {
	display: flex;
	flex-direction: column;
	align-items: center;
}

footer {
	padding: 32px;
	text-align: center;
	line-height: 1.5;
}

.found-data {
	padding-block: 32px 16px;
	font-size: 1.75rem;
}

.tree {
	display: grid;
	width: fit-content;
	padding: 16px;
	gap: 16px;
	grid-template-columns: repeat(2, 1fr);
	width: 60vw;

	.main-data {
		grid-column: span 2;
		display: flex;
		flex-direction: column;
		padding: 16px;
		gap: 8px;
		border-radius: 8px;
		border: 1px solid #ddd;
		box-shadow: 0 0 8px rgba(0, 0, 0, 0.1);

		h2 {
			font-size: 1.5rem;
		}

		p {
			font-size: 1rem;
		}

		.found-likely-data {
			display: grid;
			grid-template-columns: repeat(3, 1fr);
			gap: 16px;
			padding-top: 16px;

			.element {
				display: flex;
				flex-direction: column;
				gap: 4px;

				&.usernames {
					grid-column: span 3;
				}
	
				.item-data {
					display: flex;
					gap: 4px;
					align-items: center;
	
					&:has(.item-data) {
						column-gap: 12px;
						row-gap: 6px;
						flex-wrap: wrap;
					}
	
					.value {
						font-size: 0.9rem;
						color: #333;
						width: fit-content;
					}
	
					.percentage {
						font-size: 0.6rem;
						padding: 2px 4px;
						border-radius: 10px;
						background-color: #ddd;
						color: #666;
						font-weight: bold;
					}

					.checkmark {
						color: #2ab825;

						.material-symbols-outlined {
							font-size: 0.8rem;
						}
					}
				}
			}
		}
	}

	.column {
		display: flex;
		flex-direction: column;
		gap: 16px;

		.node {
			display: flex;
			flex-direction: column;
			padding: 16px;
			gap: 8px;
			border-radius: 8px;
			border: 1px solid #ddd;
			box-shadow: 0 0 8px rgba(0, 0, 0, 0.1);
	
			.node-head {
				display: flex;
				align-items: center;
				gap: 8px;
	
				.icon {
					width: 20px;
					height: 20px;
					border-radius: 5px;
					object-fit: contain;
					background-color: #ccc;
				}
	
				h3 {
					font-size: 1.25rem;
				}
	
				.nsfw {
					padding: 4px;
					border-radius: 4px;
					background-color: #f00;
					color: #fff;
					font-size: 0.75rem;
					font-weight: bold;
				}
	
				.percentage {
					padding: 3px 6px;
					border-radius: 20px;
					color: #fff;
					font-size: 0.75rem;
					font-weight: bold;
				}
			}
	
			.node-body {
				display: grid;
				grid-template-columns: repeat(2, 1fr);
				gap: 8px;
	
				.element {
					display: flex;
					flex-direction: column;
					gap: 4px;
					width: 100%;
	
					.item-data {
						display: flex;
						gap: 4px;
						align-items: center;
	
						.value {
							font-size: 0.9rem;
							color: #333;
						}
	
						.percentage {
							font-size: 0.6rem;
							padding: 2px 4px;
							border-radius: 10px;
							background-color: #ddd;
							color: #666;
							font-weight: bold;
						}

						.checkmark {
							color: #2ab825;

							.material-symbols-outlined {
								font-size: 0.8rem;
							}
						}
					}
				}
			}
		}
	}
}
`;

function nodeHeight(result: Result) {
	let height = 0;
	let temp = 0;

	if (result.firstNames.length > 0) {
		temp += 1 + result.firstNames.length * 0.9;
	}

	if (result.lastNames.length > 0) {
		if (temp > 0) {
			height += Math.max(temp, 1 + result.lastNames.length * 0.9);
			temp = 0;
		} else {
			temp += 1 + result.lastNames.length * 0.9;
		}
	}

	if (result.locations.length > 0) {
		if (temp > 0) {
			height += Math.max(temp, 1 + result.locations.length * 0.9);
			temp = 0;
		} else {
			temp += 1 + result.locations.length * 0.9;
		}
	}

	if (result.emails.length > 0) {
		if (temp > 0) {
			height += Math.max(temp, 1 + result.emails.length * 0.9);
			temp = 0;
		} else {
			temp += 1 + result.emails.length * 0.9;
		}
	}

	if (result.phones.length > 0) {
		if (temp > 0) {
			height += Math.max(temp, 1 + result.phones.length * 0.9);
			temp = 0;
		} else {
			temp += 1 + result.phones.length * 0.9;
		}
	}

	if (result.urls.length > 0) {
		if (temp > 0) {
			height += Math.max(temp, 1 + result.urls.length * 0.9);
			temp = 0;
		} else {
			temp += 1 + result.urls.length * 0.9;
		}
	}

	height += temp;

	return 4.8 + height;
}

function makeNode(result: Result) {
	const iconUrl =
		"https://www.google.com/s2/favicons?sz=64&domain=" +
		encodeURIComponent(result.url!);

	const node = parse(/* HTML */ `<div
		class="node"
		id="${result.id}-${result.username?.value.replace(/\./g, "_dot_")}"
	>
		<div class="node-head">
			<img src="${iconUrl}" alt="${result.id} icon" class="icon" />
			<h3>${Bun.escapeHTML(result.title)}</h3>
			${result.nsfw ? /* HTML */ `<span class="nsfw">NSFW</span>` : ""}
			<span
				class="percentage"
				style="background-color: hsl(${result.prob * 120}, 100%, 35%)"
				>${roundDecimal(result.prob * 100, 1)}%</span
			>
		</div>
		<a href="${result.url}" target="_blank">${result.url}</a>
		<ul class="node-body">
			${result.firstNames.length > 0
				? /* HTML */ `<li class="element">
						<h4>First Names</h4>
						${result.firstNames
							.map(
								(firstName) => /* HTML */ `
									<div class="item-data">
										<p class="value">${capitalize(firstName.value)}</p>
										<p class="percentage">
											${roundDecimal(firstName.prob * 100, 3)}%
										</p>
									</div>
								`
							)
							.join("")}
				  </li>`
				: ""}
			${result.lastNames.length > 0
				? /* HTML */ `<li class="element">
						<h4>Last Names</h4>
						${result.lastNames
							.map(
								(lastName) => /* HTML */ `
									<div class="item-data">
										<p class="value">${capitalize(lastName.value)}</p>
										<p class="percentage">
											${roundDecimal(lastName.prob * 100, 3)}%
										</p>
									</div>
								`
							)
							.join("")}
				  </li>`
				: ""}
			${result.locations.length > 0
				? /* HTML */ `<li class="element">
						<h4>Locations</h4>
						${result.locations
							.map(
								(location) => /* HTML */ `
									<div class="item-data">
										<p class="value">${parseLocation(location)}</p>
										<p class="percentage">
											${roundDecimal(location.prob * 100, 3)}%
										</p>
									</div>
								`
							)
							.join("")}
				  </li>`
				: ""}
			${result.emails.length > 0
				? /* HTML */ `<li class="element">
						<h4>Email adresses</h4>
						${result.emails
							.map(
								(email) => /* HTML */ `
									<div class="item-data">
										<a class="value" href="mailto:${email.value}"
											>${email.value}</a
										>
										<p class="percentage">
											${roundDecimal(email.prob * 100, 3)}%
										</p>
										${email.verified
											? /* HTML */ `<span class="checkmark"
													><span class="material-symbols-outlined">
														done_all
													</span></span
											  >`
											: ""}
									</div>
								`
							)
							.join("")}
				  </li>`
				: ""}
			${result.phones.length > 0
				? /* HTML */ `<li class="element">
						<h4>Phone numbers</h4>
						${result.phones
							.map(
								(phone) => /* HTML */ `
									<div class="item-data">
										<p class="value">${phone.value}</p>
										<p class="percentage">
											${roundDecimal(phone.prob * 100, 3)}%
										</p>
									</div>
								`
							)
							.join("")}
				  </li>`
				: ""}
			${result.urls.length > 0
				? /* HTML */ `<li class="element">
						<h4>Linked to</h4>
						${result.urls
							.map(
								(url) => /* HTML */ `
									<div class="item-data">
										<a
											class="value"
											href="#${url.id}-${url.username?.value.replace(
												/\./g,
												"_dot_"
											)}"
											>${url.title}</a
										>
										<p class="percentage">
											${roundDecimal(url.prob * 100, 3)}%
										</p>
									</div>
								`
							)
							.join("")}
				  </li>`
				: ""}
		</ul>
	</div>`);

	return node;
}

export default async function makeWebView(result: Result) {
	const style = await compileString(SCSS, { style: "compressed" });
	const root = parse(HTML);

	const title =
		result.likely.usernames?.[0]?.value ??
		result.likely.firstName?.value ??
		"unknown";

	const head = root.querySelector("head")!;
	head.appendChild(parse(`<title>${title}</title>`));
	head.appendChild(parse(`<style>${style.css.toString()}</style>`));

	const foundData = root.querySelector(".found-data")!;
	const tree = root.querySelector(".tree")!;
	const mainData = tree.querySelector(".found-likely-data")!;

	if (result.likely.usernames.length > 0) {
		foundData.appendChild(
			parse(/* HTML */ `<h2>🔎 Found data for ${title}</h2>`)
		);

		const usernames = result.likely.usernames.map(
			(username) => /* HTML */ `
				<div class="item-data">
					<p class="value">${username.value}</p>
					<p class="percentage">${roundDecimal(username.prob * 100, 3)}%</p>
				</div>
			`
		);

		mainData.appendChild(
			parse(/* HTML */ `
				<div class="element usernames">
					<h4>Usernames</h4>
					<div class="item-data">${usernames.join("")}</div>
				</div>
			`)
		);
	}

	if (result.likely.firstName) {
		const firstName = result.likely.firstName;

		mainData.appendChild(
			parse(/* HTML */ `
				<div class="element">
					<h4>First Name</h4>
					<div class="item-data">
						<p class="value">${capitalize(firstName.value)}</p>
						<p class="percentage">${roundDecimal(firstName.prob * 100, 3)}%</p>
					</div>
				</div>
			`)
		);
	}

	if (result.likely.lastName) {
		const lastName = result.likely.lastName;

		mainData.appendChild(
			parse(/* HTML */ `
				<div class="element">
					<h4>Last Name</h4>
					<div class="item-data">
						<p class="value">${capitalize(lastName.value)}</p>
						<p class="percentage">${roundDecimal(lastName.prob * 100, 3)}%</p>
					</div>
				</div>
			`)
		);
	}

	if (result.likely.location) {
		const location = result.likely.location;

		mainData.appendChild(
			parse(/* HTML */ `
				<div class="element">
					<h4>Location</h4>
					<div class="item-data">
						<p class="value">${parseLocation(location)}</p>
						<p class="percentage">${roundDecimal(location.prob * 100, 3)}%</p>
					</div>
				</div>
			`)
		);
	}

	if (result.likely.emails.length > 0) {
		const emails = result.likely.emails.map(
			(email) => /* HTML */ `
				<div class="item-data">
					<a class="value" href="mailto:${email.value}">${email.value}</a>
					<p class="percentage">${roundDecimal(email.prob * 100, 3)}%</p>
					${email.verified
						? /* HTML */ `<span class="checkmark"
								><span class="material-symbols-outlined">done_all</span></span
						  >`
						: ""}
				</div>
			`
		);

		mainData.appendChild(
			parse(/* HTML */ `
				<div class="element">
					<h4>Email adresses</h4>
					<div class="item-data">${emails.join("")}</div>
				</div>
			`)
		);
	}

	if (result.likely.phone) {
		const phone = result.likely.phone;

		mainData.appendChild(
			parse(/* HTML */ `
				<div class="element">
					<h4>Phone number</h4>
					<div class="item-data">
						<p class="value">${phone.value}</p>
						<p class="percentage">${roundDecimal(phone.prob * 100, 3)}%</p>
					</div>
				</div>
			`)
		);
	}

	let c1Size = 0;
	let c2Size = 0;

	result.urls.forEach((url) => {
		const c1 = tree.querySelector(".c1")!;
		const c2 = tree.querySelector(".c2")!;
		const node = makeNode(url);

		if (c1Size <= c2Size) {
			c1.appendChild(node);
			c1Size += nodeHeight(url);
		} else {
			c2.appendChild(node);
			c2Size += nodeHeight(url);
		}
	});

	const server = Bun.serve({
		fetch() {
			return new Response(root.toString(), {
				headers: { "Content-Type": "text/html" },
			});
		},
	});

	open(server.url.toString());

	return server;
}
